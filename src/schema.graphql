type Query {
  findCategory: [Category]!
  findPost: returnType!
  meProfile: meProfileReturnType!
  findScrap: [Scrap]!
  findScrapForUser: PostreturnType!
  findAllUser: UserReturnType!
  checkUser: String
}

type Mutation {
  createCategory(category_idx: Int!, category_name: String!): Category!
  deleteCategory(category_idx: Int!): Category!
  updateCategory(category_idx: Int!, category_name: String!): Category!
  singleUpload(file: Upload!): Boolean!
  createPost(image: image!, post: post!, hashtag: hashtag): Post!
  createScrap(scrap: scrap!): Scrap!
  kakaoAuth(code: String!): String!
  createUser(user_email: String!, user_password: String!): createUserReturnType!
  updateUserProfile(user_name: String!, user_location: String, user_like_category: String, user_profile_img: String, user_birthday: String, user_career: String, user_education: String, user_career_img: [String]): updateUserProfileReturnType!
  loginUser(user_email: String!, user_password: String!): loginUserReturnType!
  deleteUser(user_idx: Int!): User!
}

type Category {
  category_idx: Int!
  category_name: String!
}

scalar Upload

type Post {
  post_idx: Int
  category_idx: Int!
  user_idx: Int!
  image_idx: Int!
  post_title: String!
  post_content: String!
  category: Category!
  user: User!
  image: Image!
  hashtag: Hashtag!
}

input image {
  image_url: String
}

input post {
  category_idx: Int!
  user_idx: Int!
  image_idx: Int!
  post_title: String!
  post_content: String!
}

input hashtag {
  hashtag_name: String
}

type returnType {
  count: Int!
  rows: [Post!]!
}

type Image {
  image_idx: Int!
  image_url: String!
}

type Hashtag {
  hashtag_idx: Int!
  hashtag_name: String!
}

type meProfileReturnType {
  status: Int!
  data: Profile
  error: String
}

type Profile {
  # profile_idx: Int
  user_idx: Int
  user_name: String
  user_location: String
  user_education: String
  user_profile_img: Int
  user_like_category_idx: Int
  user_career: String
  user: User
  category: Category
  user: User
  image: Image
}

type user {
  user_idx: Int
  user_email: String
  user_password: String
  user_profile_idx: Int
}

type Scrap {
  scrap_idx: Int!
  user_idx: Int!
  post_idx: Int!
  post: Post!
  user: User!
}

input scrap {
  user_idx: Int!
  post_idx: Int!
}

type PostreturnType {
  count: Int!
  rows: [Scrap!]!
}

type User {
  user_idx: Int!
  user_email: String!
  user_password: String!
}

type UserReturnType {
  count: Int!
  rows: [User!]!
}

type loginUserReturnType {
  status: Int!
  data: String
  error: String
}

type createUserReturnType {
  status: Int!
  error: String
}

type updateUserProfileReturnType {
  status: Int!
  error: String
}
